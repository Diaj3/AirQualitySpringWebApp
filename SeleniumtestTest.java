// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class SeleniumtestTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void seleniumtest() {
    // Test name: selenium_test
    // Step # | name | target | value | comment
    // 1 | open | / |  | 
    driver.get("http://localhost:8080/");
    // 2 | setWindowSize | 1440x780 |  | 
    driver.manage().window().setSize(new Dimension(1440, 780));
    // 3 | click | id=location |  | 
    driver.findElement(By.id("location")).click();
    // 4 | type | id=location | Lisbon | 
    driver.findElement(By.id("location")).sendKeys("Lisbon");
    // 5 | click | css=.container:nth-child(1) |  | 
    driver.findElement(By.cssSelector(".container:nth-child(1)")).click();
    // 6 | click | css=.btn |  | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 7 | click | linkText=Air Quality |  | 
    driver.findElement(By.linkText("Air Quality")).click();
    // 8 | click | id=location |  | 
    driver.findElement(By.id("location")).click();
    // 9 | type | id=location | porto | 
    driver.findElement(By.id("location")).sendKeys("porto");
    // 10 | click | css=form |  | 
    driver.findElement(By.cssSelector("form")).click();
    // 11 | click | css=.btn |  | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 12 | click | linkText=Locations already searched |  | 
    driver.findElement(By.linkText("Locations already searched")).click();
    // 13 | click | linkText=Air Quality |  | 
    driver.findElement(By.linkText("Air Quality")).click();
    // 14 | click | id=location |  | 
    driver.findElement(By.id("location")).click();
    // 15 | type | id=location | sdgGFDAG | 
    driver.findElement(By.id("location")).sendKeys("sdgGFDAG");
    // 16 | click | css=.btn |  | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 17 | click | linkText=Locations already searched |  | 
    driver.findElement(By.linkText("Locations already searched")).click();
    // 18 | click | linkText=Air Quality |  | 
    driver.findElement(By.linkText("Air Quality")).click();
    // 19 | click | id=location |  | 
    driver.findElement(By.id("location")).click();
    // 20 | type | id=location | AFDGAFDG | 
    driver.findElement(By.id("location")).sendKeys("AFDGAFDG");
    // 21 | click | css=.btn |  | 
    driver.findElement(By.cssSelector(".btn")).click();
    // 22 | click | linkText=Try Again |  | 
    driver.findElement(By.linkText("Try Again")).click();
  }
}
